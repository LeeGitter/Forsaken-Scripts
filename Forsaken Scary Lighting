--// Threat Visual Override System
--// Author: Cesar + Copilot
--// Description: Applies dynamic red hue based on threat level. Saturation removed. Contrast doubled.

local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")

--// CONFIGURATION
local BASE_TINT = Color3.fromRGB(255, 200, 200) -- soft red
local MAX_TINT = Color3.fromRGB(255, 100, 100) -- deeper red
local CONTRAST = 0.1 -- doubled from original 0.1
local EFFECT_NAME = "ThreatVisuals"

--// THREAT FUNCTION (replace with your logic)
local function getThreat()
    -- Return a value between 0 (no threat) and 1 (max threat)
    -- Example: based on proximity, health, or anomaly state
    return math.clamp(math.sin(tick() * 0.5) * 0.5 + 0.5, 0, 1) -- demo: oscillating threat
end

--// APPLY OVERRIDE
local function applyLightingOverrides()
    -- Remove existing effect if present
    local existing = Lighting:FindFirstChild(EFFECT_NAME)
    if existing then
        existing:Destroy()
    end

    -- Create new effect
    local cc = Instance.new("ColorCorrectionEffect")
    cc.Name = EFFECT_NAME
    cc.Contrast = CONTRAST
    cc.TintColor = BASE_TINT
    cc.Enabled = true
    cc.Parent = Lighting
end

--// UPDATE TINT BASED ON THREAT
local function updateTint()
    local cc = Lighting:FindFirstChild(EFFECT_NAME)
    if not cc then return end

    local threat = getThreat()
    local r = BASE_TINT.R + (MAX_TINT.R - BASE_TINT.R) * threat
    local g = BASE_TINT.G + (MAX_TINT.G - BASE_TINT.G) * threat
    local b = BASE_TINT.B + (MAX_TINT.B - BASE_TINT.B) * threat

    cc.TintColor = Color3.fromRGB(r * 255, g * 255, b * 255)
end

--// INIT
applyLightingOverrides()

--// LOOP
RunService.RenderStepped:Connect(updateTint)
